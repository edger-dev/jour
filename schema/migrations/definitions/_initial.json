{"schemas":"-- https://surrealdb.com/docs/surrealdb/security/authentication\n\nDEFINE FUNCTION IF NOT EXISTS fn::allow_signup() {\n    RETURN false;\n};\n\nDEFINE SCOPE IF NOT EXISTS admin SESSION 1d\n\tSIGNIN (\n\t\tSELECT * FROM ONLY user WHERE email = $email\n            AND crypto::argon2::compare(password, $password)\n            AND role = \"admin\"\n\t\t\tLIMIT 1\n\t)\n\tSIGNUP {\n        THROW \"SignUp not allowed!\";\n\t};\n\nDEFINE SCOPE IF NOT EXISTS editor SESSION 1d\n\tSIGNIN (\n\t\tSELECT * FROM ONLY user WHERE email = $email\n            AND crypto::argon2::compare(password, $password)\n            AND (role = \"admin\" OR role = \"editor\")\n\t\t\tLIMIT 1\n\t)\n\tSIGNUP {\n        THROW \"SignUp not allowed!\";\n\t};\n\nDEFINE SCOPE IF NOT EXISTS reader SESSION 1d\n\tSIGNIN (\n\t\tSELECT * FROM ONLY user WHERE email = $email\n            AND crypto::argon2::compare(password, $password)\n\t\t\tLIMIT 1\n\t)\n\tSIGNUP {\n        IF fn::allow_signup() THEN\n            return fn::create_reader($email, $name, $password);\n        ELSE {\n            THROW \"SignUp not allowed!\";\n        }\n        END\n\t};\n\nDEFINE TABLE IF NOT EXISTS backlink SCHEMAFULL TYPE RELATION FROM entry TO entry;\n\nDEFINE FIELD IF NOT EXISTS kind ON backlink TYPE string\n    ASSERT $value = \"weak\" OR $value = \"link\" OR $value = \"shadow\";\n\nDEFINE FIELD IF NOT EXISTS data ON backlink FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON backlink TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON backlink TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS backlinked_updated_at_index ON backlink COLUMNS updated_at;\n\nDEFINE INDEX IF NOT EXISTS backlink_in_out_index ON backlink COLUMNS in, out UNIQUE;\n\nDEFINE INDEX IF NOT EXISTS backlink_out_index ON backlink COLUMNS out;\n\nDEFINE TABLE IF NOT EXISTS entry SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where true\n        FOR create, update\n            where ($scope = \"editor\") AND user = $auth.id\n        FOR delete\n            NONE;\n\nDEFINE FIELD IF NOT EXISTS ver ON entry TYPE int\n    DEFAULT 0\n    VALUE ($before AND $before + 1) OR 1;\n\nDEFINE FIELD IF NOT EXISTS user ON entry TYPE record<user>;\n\nDEFINE FIELD IF NOT EXISTS kind ON entry TYPE string\n    ASSERT $value = \"node\" OR $value = \"list\";\n\nDEFINE FIELD IF NOT EXISTS text ON entry TYPE option<string>;\n\nDEFINE FIELD IF NOT EXISTS data ON entry FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS links ON entry FLEXIBLE TYPE option<array<record<entry>>>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON entry TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON entry TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS entry_user_index ON entry COLUMNS user;\nDEFINE INDEX IF NOT EXISTS entry_updated_at_index ON entry COLUMNS updated_at;\n\n-- https://surrealdb.com/docs/surrealdb/surrealql/statements/define/indexes#full-text-search-index\nDEFINE ANALYZER IF NOT EXISTS entry_text_analyzer TOKENIZERS blank FILTERS lowercase, snowball(english);\nDEFINE INDEX IF NOT EXISTS entry_text_index ON entry COLUMNS text SEARCH ANALYZER entry_text_analyzer BM25 HIGHLIGHTS;\n\nDEFINE EVENT entry_create_history ON entry WHEN $event = \"CREATE\" OR $event = \"UPDATE\" THEN (\n    CREATE ONLY entry_history:[$after.id, $after.updated_at] CONTENT {\n        ver: $after.ver,\n        user: $after.user.id,\n        kind: $after.kind,\n        text: $after.text,\n        data: $after.data,\n        links: $after.links,\n    }\n);\n\n\n-- ID: [entry.id, updated_at]\n\nDEFINE TABLE IF NOT EXISTS entry_history SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where ($scope = \"editor\")\n        FOR create, update, delete\n            NONE;\n\nDEFINE FIELD IF NOT EXISTS ver ON entry_history TYPE int\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS user ON entry_history TYPE record<user>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS kind ON entry_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS text ON entry_history TYPE option<string>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS data ON entry_history FLEXIBLE TYPE option<object>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS links ON entry_history FLEXIBLE TYPE option<array<record<entry>>>\n    READONLY;\n\n-- https://surrealdb.com/docs/surrealdb/surrealql/statements/define/indexes#full-text-search-index\nDEFINE INDEX IF NOT EXISTS entry_history_text_index ON entry_history COLUMNS text SEARCH ANALYZER entry_text_analyzer BM25 HIGHLIGHTS;\n-- ID: slug\nDEFINE TABLE IF NOT EXISTS jour SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where true\n        FOR create, update\n            where ($scope = \"editor\") AND user = $auth.id\n        FOR delete\n            where ($scope = \"admin\");\n\nDEFINE FIELD IF NOT EXISTS ver ON jour TYPE int\n    DEFAULT 0\n    VALUE ($before AND $before + 1) OR 1;\n\nDEFINE FIELD IF NOT EXISTS user ON jour TYPE record<user>;\n\nDEFINE FIELD IF NOT EXISTS name ON jour TYPE string\n    VALUE string::trim($value)\n    ASSERT string::len($value) > 0;\n\nDEFINE FIELD IF NOT EXISTS avatar ON jour TYPE option<string>\n    ASSERT $value = NONE OR string::is::url($value);\n\nDEFINE FIELD IF NOT EXISTS data ON jour FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON jour TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON jour TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS jour_user_index ON jour COLUMNS user;\nDEFINE INDEX IF NOT EXISTS jour_updated_at_index ON jour COLUMNS updated_at;\n\nDEFINE EVENT jour_create_history ON jour WHEN $event = \"CREATE\" OR $event = \"UPDATE\" THEN (\n    CREATE ONLY jour_history:[$after.id, $after.updated_at] CONTENT {\n        ver: $after.ver,\n        user: $after.user.id,\n        name: $after.name,\n        avatar: $after.avatar,\n        data: $after.data,\n    }\n);\n\n-- ID: [jour.id, updated_at]\n\nDEFINE TABLE IF NOT EXISTS jour_history SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where ($scope = \"editor\")\n        FOR create, update, delete\n            NONE;\n\nDEFINE FIELD IF NOT EXISTS ver ON jour_history TYPE int\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS user ON jour_history TYPE record<user>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS name ON jour_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS avatar ON jour_history TYPE option<string>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS data ON jour_history FLEXIBLE TYPE option<object>\n    READONLY;\n\nDEFINE TABLE IF NOT EXISTS publish SCHEMAFULL TYPE RELATION FROM jour TO entry;\n\nDEFINE FIELD IF NOT EXISTS ver ON publish TYPE int\n    DEFAULT 0\n    VALUE ($before AND $before + 1) OR 1;\n\nDEFINE FIELD IF NOT EXISTS user ON publish TYPE record<user>;\n\nDEFINE FIELD IF NOT EXISTS slug ON publish TYPE string\n    VALUE string::trim($value)\n    ASSERT string::len($value) >= 3;\n\nDEFINE FIELD IF NOT EXISTS data ON publish FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON publish TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON publish TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS publish_user_index ON publish COLUMNS user;\nDEFINE INDEX IF NOT EXISTS publish_updated_at_index ON publish COLUMNS updated_at;\n\nDEFINE INDEX IF NOT EXISTS publish_in_slug_index ON publish COLUMNS in, slug UNIQUE;\n\nDEFINE INDEX IF NOT EXISTS publish_out_index ON publish COLUMNS out;\n\nDEFINE EVENT publish_create_history ON publish WHEN $event = \"CREATE\" OR $event = \"UPDATE\" THEN (\n    CREATE ONLY publish_history:[$after.id, $after.updated_at] CONTENT {\n        in: $after.in,\n        out: $after.out,\n        ver: $after.ver,\n        user: $after.user,\n        slug: $after.slug,\n        data: $after.data,\n    }\n);\n\n\n-- ID: [publish.id, updated_at]\n\nDEFINE TABLE IF NOT EXISTS publish_history SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where ($scope = \"editor\")\n        FOR create, update, delete\n            NONE;\n\nDEFINE FIELD IF NOT EXISTS in ON publish_history TYPE record<jour>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS out ON publish_history TYPE record<entry>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS ver ON publish_history TYPE int\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS user ON publish_history TYPE record<user>\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS slug ON publish_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS data ON publish_history FLEXIBLE TYPE option<object>\n    READONLY;\n\nDEFINE INDEX IF NOT EXISTS publish_history_in_slug_index ON publish_history COLUMNS in, slug;\n\nDEFINE INDEX IF NOT EXISTS publish_history_out_index ON publish_history COLUMNS out;\n\nDEFINE TABLE IF NOT EXISTS reference SCHEMAFULL TYPE RELATION FROM jour TO entry\n    PERMISSIONS\n        FOR create, update\n            where $auth.role = \"admin\" OR $auth.role = \"editor\"\n        FOR delete\n            where $auth.role = \"admin\";\n\nDEFINE FIELD IF NOT EXISTS active ON reference TYPE bool\n    DEFAULT true;\n\nDEFINE FIELD IF NOT EXISTS data ON reference FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON reference TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON reference TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS reference_updated_at_index ON reference COLUMNS updated_at;\n\nDEFINE INDEX IF NOT EXISTS reference_in_out_index ON reference COLUMNS in, out UNIQUE;\n\nDEFINE INDEX IF NOT EXISTS reference_out_index ON reference COLUMNS out;\n\nDEFINE TABLE IF NOT EXISTS script_migration SCHEMAFULL\n    PERMISSIONS\n        FOR select FULL\n        FOR create, update, delete NONE;\n\nDEFINE FIELD IF NOT EXISTS script_name ON script_migration TYPE string;\nDEFINE FIELD IF NOT EXISTS executed_at ON script_migration TYPE datetime VALUE time::now() READONLY;\nDEFINE TABLE IF NOT EXISTS user SCHEMAFULL TYPE NORMAL\n\tPERMISSIONS\n        FOR select\n            WHERE $scope = \"admin\" OR $scope = \"editor\" OR $scope = \"reader\" OR id = $auth.id\n\t\tFOR create\n            WHERE $scope = \"admin\" OR ($allowSignUp AND $scope = \"reader\")\n\t\tFOR update, delete\n            WHERE $scope = \"admin\" OR ($allowSignUp AND $scope = \"reader\" AND id = $auth.id);\n\nDEFINE FIELD IF NOT EXISTS ver ON user TYPE int\n    DEFAULT 0\n    VALUE ($before AND $before + 1) OR 1;\n\nDEFINE FIELD IF NOT EXISTS email ON user TYPE string\n    READONLY\n    VALUE string::lowercase(string::trim($value))\n    ASSERT string::is::email($value);\n\nDEFINE FIELD IF NOT EXISTS name ON user TYPE string\n    VALUE string::trim($value)\n    ASSERT string::len($value) >= 3;\n\nDEFINE FIELD IF NOT EXISTS password ON user TYPE string\n    PERMISSIONS NONE;\n\nDEFINE FIELD IF NOT EXISTS avatar ON user TYPE string\n    ASSERT string::is::url($value);\n\nDEFINE FIELD IF NOT EXISTS role ON user TYPE string\n    ASSERT $value = \"admin\" OR $value = \"editor\" OR $value = \"reader\";\n\nDEFINE FIELD IF NOT EXISTS data ON user FLEXIBLE TYPE option<object>;\n\nDEFINE FIELD IF NOT EXISTS created_at ON user TYPE datetime\n    READONLY\n    DEFAULT time::now();\n\nDEFINE FIELD IF NOT EXISTS updated_at ON user TYPE datetime\n    VALUE time::now();\n\nDEFINE INDEX IF NOT EXISTS user_email_index ON user COLUMNS email UNIQUE;\nDEFINE INDEX IF NOT EXISTS user_updated_at_index ON user COLUMNS updated_at;\n\nDEFINE EVENT user_create_history ON user WHEN $event = \"CREATE\" OR $event = \"UPDATE\" THEN (\n    CREATE ONLY user_history:[$after.id, $after.updated_at] CONTENT {\n        ver: $after.ver,\n        email: $after.email,\n        name: $after.name,\n        password: $after.password,\n        avatar: $after.avatar,\n        role: $after.role,\n        data: $after.data,\n    }\n);\n\nDEFINE FUNCTION IF NOT EXISTS fn::create_user(\n    $role: string,\n    $email: string,\n    $name: string,\n    $password: string,\n) {\n    return CREATE ONLY user CONTENT {\n        email: $email,\n        name: $name,\n        avatar: \"https://gravatar.com/avatar/\" + crypto::sha256($email) + \"?d=identicon\",\n        password: crypto::argon2::generate($password),\n        role: $role,\n    }\n} PERMISSIONS NONE;\n\nDEFINE FUNCTION IF NOT EXISTS fn::create_reader(\n    $email: string,\n    $name: string,\n    $password: string,\n) {\n    return fn::create_user(\"reader\", $email, $name, $password);\n};\n\n\n-- ID: [user.id, updated_at]\n\nDEFINE TABLE IF NOT EXISTS user_history SCHEMAFULL TYPE NORMAL\n    PERMISSIONS\n        FOR select\n            where ($scope = \"admin\")\n        FOR create, update, delete\n            NONE;\n\nDEFINE FIELD IF NOT EXISTS ver ON user_history TYPE int\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS email ON user_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS name ON user_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS password ON user_history TYPE string;\n\nDEFINE FIELD IF NOT EXISTS avatar ON user_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS role ON user_history TYPE string\n    READONLY;\n\nDEFINE FIELD IF NOT EXISTS data ON user_history FLEXIBLE TYPE option<object>\n    READONLY;\n\n\nDEFINE FUNCTION IF NOT EXISTS fn::create_jour(\n    $slug: string,\n    $user: record<user>,\n    $name: string,\n    $data: option<object>,\n) {\n    return CREATE ONLY type::thing(\"jour\", string::lowercase(string::trim($slug))) CONTENT {\n        user: $user,\n        name: $name,\n        data: $data,\n    }\n} PERMISSIONS NONE;\n\nDEFINE FUNCTION IF NOT EXISTS fn::create_entry(\n    $user: record<user>,\n    $kind: string,\n    $text: option<string>,\n    $data: option<object>,\n    $links: option<array<record<entry>>>,\n) {\n    return CREATE ONLY entry CONTENT {\n        user: $user,\n        kind: $kind,\n        text: $text,\n        data: $data,\n        links: $links,\n    }\n} PERMISSIONS NONE;\n\nDEFINE FUNCTION IF NOT EXISTS fn::relate_publish(\n    $jour: record<jour>,\n    $entry: record<entry>,\n    $user: record<user>,\n    $slug: string,\n    $data: option<object>,\n) {\n    return RELATE ONLY\n        $jour -> publish -> $entry CONTENT {\n        user: $user,\n        slug: string::lowercase(string::trim($slug)),\n        data: $data,\n    }\n} PERMISSIONS NONE;\n\n\n\n","events":""}